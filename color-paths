#!/usr/bin/env python3
# -*- python -*-
"""path colorizer

Colors the path segments in each path given on stdin or in the file specified in the argument.
"""

import fileinput
import os
from sys import argv
import hashlib

class string_colorizer(object):
    def __init__(self,
                 colors      = None,
                 reset       = "\033[0m",
                 hashfunc    = hashlib.md5,
                 use_hashlib = True):
        """
        Arguments:
        - `colors`: array of the used colors' numbers for the escape codes; default: range from 31 to 37 + bolds
        - `reset`: escape code used to reset the formatting; default: "\\033[0m"
        - `hashfunc`: function used to map the string to the integer used to determine the color
        - `use_hashlib`: set to False if the hashfunc returns integer and does not need to be converted like the hashlib functions
        """
        self.reset = reset
        if use_hashlib:
            self.hashfunc = lambda x: int(hashfunc(x.encode()).hexdigest(),
                                          base=16)
        else:
            self.hashfunc = hashfunc

        if colors == None:
            colors = [ "{1};{0}".format(color, bold)
                       for bold in [0,1]
                       for color in range(31,38) ]
        self.colors = [ "\033[{0}m".format(color)
                        for color in colors ]

    def colorize(self, string):
        """Colors the given string according to its hash"""
        return self.colors[self.hashfunc(string) % len(self.colors)]

    def colorize_path(self, path):
        """Colors each path component to the appropriate color"""
        return os.sep.join([ self.colorize(component) + component + self.reset
                             for component in path.split(os.sep) ])

def main():
    colorizer = string_colorizer()
    for line in fileinput.input():
        path = line.rstrip(os.linesep)
        print(colorizer.colorize_path(path))

if __name__ == "__main__":
    main()
